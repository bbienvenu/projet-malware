// shikureto.cpp : définit le point d'entrée pour l'application console.
//

#include "stdafx.h"
#include <windows.h>
#include <wincrypt.h>


// Define the function Get_And_Print_Hash.
BYTE * Get_And_Print_Hash(HCRYPTHASH hOHash)
{
    //--------------------------------------------------------------------
    // Declare and initialize local variables.
    HCRYPTHASH   hHash;
    BYTE         *pbHash;
    DWORD        dwHashLen;
    DWORD        dwHashLenSize = sizeof(DWORD);
    DWORD        i;
    //--------------------------------------------------------------------
    // Duplicate the hash passed in.
    // The hash is duplicated to leave the original hash intact.

    if (CryptDuplicateHash(hOHash,NULL,0,&hHash)){
        // It worked. Do nothing.
    }
    else{
       printf("Error during CryptDuplicateHash. \n");
    }

    if(CryptGetHashParam(hHash,HP_HASHSIZE,(BYTE *)&dwHashLen,&dwHashLenSize,0)){
        // It worked. Do nothing.
    }
    else{
        printf("CryptGetHashParam failed to get size. \n");
    }
    if(pbHash = (BYTE*)malloc(dwHashLen)){
        // It worked. Do nothing.
    }
    else{
         printf("Allocation failed. \n");
    }
    if(CryptGetHashParam(hHash,HP_HASHVAL,pbHash,&dwHashLen,0)){
		// Print the hash value.
        //printf("The hash is:  ");
        for(i = 0 ; i < dwHashLen ; i++){
           printf("%02x ",pbHash[i]);
        }
		printf("\n");
    }
    else{
        printf("Error during reading hash value. \n");
    }
    free(pbHash);
    if (CryptDestroyHash(hHash)){
        // It worked. Do nothing.
    }
    else{
       printf("ERROR - CryptDestroyHash \n");
    }
	return pbHash;
} // end Get_And_Print_Hash

// fonction sha 256
BYTE * sha256(char p[]){
	//--------------------------------------------------------------------
    // Copyright (C) Microsoft.  All rights reserved.
    // Declare and initialize variables.
    HCRYPTPROV   hCryptProv = NULL;
    HCRYPTHASH   hOriginalHash;
	BYTE *hash;
    //--------------------------------------------------------------------
    // Acquire a cryptographic provider context handle.
    if(CryptAcquireContext(&hCryptProv,NULL,NULL,PROV_RSA_AES,0)){// PROV_RSA_AES pour supporter sha256, PROV_RSA_FULL sinon
        printf("CryptAcquireContext succeeded. \n");
    }
    else{
        printf("Error during CryptAcquireContext! \n");
    }
    //--------------------------------------------------------------------
    // Create a hash.
    if (CryptCreateHash(hCryptProv,CALG_SHA_256,0,0,&hOriginalHash)){//CALG_SHA_256 ne marche pas sauf si PROV_RSA_AES dans CryptAcquireContext
       printf("An empty hash object has been created. \n");
    }
    else{
       printf("Error during CryptCreateHash. \n");
    }
	//--------------------------------------------------------------------
    // Hash a BYTE string.
    if (CryptHashData(hOriginalHash,(BYTE*)p,sizeof(p), 0)){
       printf("An original hash has been created and his value is: \n");
	   hash = Get_And_Print_Hash(hOriginalHash);
    }
    else{
       printf("Error during CryptHashData. \n");
    }
	return hash;
}
// fonction echo initiale
int main(int argc, _TCHAR* argv[])
{
	//for (int i = 1; i < argc; ++i){
	//	printf("%s", argv[i]);
	//	printf(" \n");
	//}
	//SYSTEMTIME st;
	//GetSystemTime(&st);  //recupere le temps (heure, minute, seconde) de la machine
	//printf("The system time is: %02d:%02d:%02d \n", st.wHour, st.wMinute, st.wSecond);

	char p[] = "trust the process";
	BYTE *hash_ = sha256(p);

	printf("ICI %02x ", hash_[0]);

	return 0;
}

