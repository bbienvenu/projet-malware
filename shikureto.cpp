// shikureto_dump.cpp : définit le point d'entrée pour l'application console.
//

#include "stdafx.h"

int string_length(char* p){
	int i = 0;
	while(p[i]!='\0'){
		i++;
	}
	return i;
}

// temporaire, a integrer dans main
// retourne le couple (numero de l'argument argv, indice du cararactere dans cet argument) de l'input a print

void print_pointer(int i, int argc, _TCHAR* argv[], int tableau[]){
	int j = 1;
	int longueur;
	if (i < string_length((char *) argv[1]) + 1){
		tableau[0] = 1;
		tableau[1] = i - 1;
		tableau[2] = 0;
	}
	else if (i == string_length((char *) argv[1]) + 1){
		tableau[0] = 1;
		tableau[1] = i - 1;
		tableau[2] = 1;
	}
	else{
		longueur = string_length((char *) argv[1]) + 1;
		while ((j < argc - 2) && (i > longueur + string_length((char *) argv[j+1]) + 1)){
			j++;
			longueur += string_length((char *) argv[j]) + 1;
		}
		if (i < longueur + string_length((char *) argv[j+1]) + 1){
			tableau[0] = j+1;
			tableau[0] = j+1;
			tableau[1] = i - longueur - 1;
			tableau[2] = 0;
		}
		else{
			tableau[0] = j+1;
			tableau[1] = i - longueur - 1;
			tableau[2] = 1;
		}
	}
}



int main(int argc, _TCHAR* argv[])
{	
	int tab[3]; // Pointeur instruction (forme argv)
	int i = 1;  // Pointeur instruction (forme indice du caractere)

	//print_pointer(i, argc, argv, tab);
	//printf("(%d, %d, %d)\n", tab[0], tab[1], tab[2]);
	//if (tab[2] != 1){
	//	char* temp = (char*) argv[tab[0]];
	//	printf("%c\n", (char)temp[tab[1]]); 
	//}
	//else {printf("space\n");}


	int s = 1234;	// Variable Syracuse
	int c = 0;		// Variable Compteur
	int n = 1;		// Variable nombre de caracteres restant a print
	for (int k=1; k<argc; k++){
		n+=string_length((char*) argv[k]);
		n+=1;
	}
	n-=1;
	//printf("longueur de la chaine : %d\n", n);


	while(n>=1){
		__asm{
syracuse_reset:
		}

		if(s!=1){
			//printf("Syracuse: s = %d\n", s);
			if(s%2==0){
				c++;
				s = s/2;
				// process
			}
			else{
				c+=4;
				s = 3*s+1;
				// process
			}

			__asm{
			jmp syracuse_reset
			}


		}
		else{
			print_pointer(i, argc, argv, tab);
			if (tab[2] != 1){
				char* temp = (char*) argv[tab[0]];
				printf("%c", (char)temp[tab[1]]); 
			}
			else {printf(" ");}
			i++;
			n-=1;
			
		}
	}
	return 0;
}
